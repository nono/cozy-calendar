// Generated by CoffeeScript 1.10.0
var Alarm, Contact, CozyInstance, Event, User, async;

async = require('async');

CozyInstance = require('../models/cozy_instance');

Alarm = require('../models/alarm');

Event = require('../models/event');

Contact = require('../models/contact');

User = require('../models/user');

module.exports.tags = function(req, res, next) {
  return async.parallel([Event.tags, Alarm.tags], function(err, results) {
    if (err) {
      return next(err);
    }
    return res.send({
      calendars: results[0].calendar.concat(results[1].calendar),
      tags: results[0].tag.concat(results[1].tag)
    });
  });
};

module.exports.index = function(req, res) {
  return async.parallel([
    (function(_this) {
      return function(cb) {
        return Contact.all(function(err, contacts) {
          var contact, i, index, len;
          if (err) {
            return cb(err);
          }
          for (index = i = 0, len = contacts.length; i < len; index = ++i) {
            contact = contacts[index];
            contacts[index] = contact.asNameAndEmails();
          }
          return cb(null, contacts);
        });
      };
    })(this), (function(_this) {
      return function(cb) {
        return Alarm.all(function(err, alarms) {
          var alarm, error, i, index, len;
          if (err) {
            return cb(err);
          }
          try {
            for (index = i = 0, len = alarms.length; i < len; index = ++i) {
              alarm = alarms[index];
              alarms[index] = alarm.timezoned();
            }
          } catch (error) {
            err = error;
            cb(err);
          }
          return cb(null, alarms);
        });
      };
    })(this), (function(_this) {
      return function(cb) {
        return Event.all(function(err, events) {
          var error, evt, i, index, len;
          if (err) {
            return cb(err);
          }
          try {
            for (index = i = 0, len = events.length; i < len; index = ++i) {
              evt = events[index];
              events[index] = evt.timezoned();
            }
          } catch (error) {
            err = error;
            cb(err);
          }
          return cb(null, events);
        });
      };
    })(this), (function(_this) {
      return function(cb) {
        return CozyInstance.getLocale(function(err, locale) {
          if (err) {
            console.log(err);
          }
          return cb(null, locale);
        });
      };
    })(this)
  ], (function(_this) {
    return function(err, results) {
      var alarms, contacts, events, locale;
      if (err) {
        return res.send({
          error: 'Server error occurred while retrieving data',
          stack: err.stack
        });
      } else {
        contacts = results[0], alarms = results[1], events = results[2], locale = results[3];
        return res.render('index.jade', {
          imports: "window.locale = \"" + locale + "\";\nwindow.initalarms = " + (JSON.stringify(alarms)) + ";\nwindow.initevents = " + (JSON.stringify(events)) + ";\nwindow.initcontacts = " + (JSON.stringify(contacts)) + ";"
        });
      }
    };
  })(this));
};
