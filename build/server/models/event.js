// Generated by CoffeeScript 1.10.0
var Event, User, americano;

americano = require('americano-cozy');

User = require('./user');

module.exports = Event = americano.getModel('Event', {
  start: {
    type: String
  },
  end: {
    type: String
  },
  place: {
    type: String
  },
  details: {
    type: String
  },
  description: {
    type: String
  },
  diff: {
    type: Number
  },
  rrule: {
    type: String
  },
  tags: {
    type: function(x) {
      return x;
    }
  },
  attendees: {
    type: [Object]
  },
  related: {
    type: String,
    "default": null
  }
});

require('cozy-ical').decorateEvent(Event);

Event.all = function(params, callback) {
  return Event.request("all", params, callback);
};

Event.tags = function(callback) {
  return Event.rawRequest("tags", {
    group: true
  }, function(err, results) {
    var i, len, out, ref, result, tag, type;
    if (err) {
      return callback(err);
    }
    out = {
      calendar: [],
      tag: []
    };
    for (i = 0, len = results.length; i < len; i++) {
      result = results[i];
      ref = result.key, type = ref[0], tag = ref[1];
      out[type].push(tag);
    }
    return callback(null, out);
  });
};

Event.prototype.timezoned = function(timezone) {
  return this;
};

Event.prototype.getGuest = function(key) {
  var currentguest, guests, ref;
  guests = ((ref = this.attendees) != null ? ref.toJSON() : void 0) || [];
  currentguest = guests.filter(function(guest) {
    return guest.key === key;
  })[0];
  if (currentguest) {
    currentguest.setStatus = (function(_this) {
      return function(status, callback) {
        currentguest.status = status;
        return _this.updateAttributes({
          attendees: guests
        }, callback);
      };
    })(this);
  }
  return currentguest;
};

Event.toUTC = function(attrs) {
  return attrs;

  /* Constraints an alarm of alarms
      * All types
          action{1} : in [AUDIO, DISPLAY, EMAIL, PROCEDURE]
          trigger{1} : when the alarm is triggered
  
  
      * Display
          description{1} : text to display when alarm is triggered
          (
              duration
              repeat
          )?
  
      * Email
          summary{1} : email title
          description{1} : email content
          attendee+ : email addresses the message should be sent to
          attach* : message attachments
  
      * Audio
          (
              duration
              repeat
          )?
  
          attach? : sound resource (base-64 encoded binary or URL)
  
      * Proc
          attach{1} : procedure resource to be invoked
          (
              duration
              repeat
          )?
          description?
   */
};
